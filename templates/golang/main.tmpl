package main
import (
	"log"
	"net"

	healthpb "{{ .Service.GitRepo }}/{{ .Config.Name }}-idl/gen/go/health"

	health "{{ .Service.GitRepo }}/{{ .Config.Name }}/service/{{ .Service.Name }}/health"

	"google.golang.org/grpc"
)

func main() {
	grpcAddr := "{{ .Service.Network.Grpc.Host }}:{{ .Service.Network.Grpc.Port }}"
	lis, err := net.Listen("tcp", grpcAddr)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	s := grpc.NewServer()

	//Server initialization & registration
	healthServer := health.NewHealthServer()
	healthpb.RegisterHealthServer(s, healthServer)
	{{ .Config.Name | CleanGoIdentifier }}Server := {{ .Config.Name | CleanGoIdentifier }}.New{{ .Config.Name | Title | CleanGoIdentifier}}Server()
	{{ .Config.Name | CleanGoIdentifier }}pb.Register{{ .Config.Name | Title | CleanGoIdentifier}}Server(s, {{ .Config.Name | CleanGoIdentifier }}Server)


	log.Printf("Starting grpc server on %v...", grpcAddr)

	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
